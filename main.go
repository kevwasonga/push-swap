package main

import (
	"fmt"

	"push-swap/src"
)

func main() {
	// Define test cases with varying stack lengths
	testCases := []*src.Stack{
		{1, 2, 3},                   // 3 elements (SortThree)
		{2, 1, 3},                   // 3 elements (SortThree)
		{1, 5, 2, 3},                // 4 elements (SortFive)
		{5, 4, 3, 2, 1},             // 5 elements (SortFive)
		{3, 4, 1, 2, 5, 6},          // 6 elements (Radix Sort)
		{10, 3, 17, 12, 5, 8, 6, 2}, // 6 elements (Radix Sort)
		{
			794, 928, 491, 670, 890, 722, 458, 275, 424, 513, 99, 916, 887, 997, 617, 342, 902, 19, 72, 544, 515, 61, 139, 563, 736, 982, 784, 571, 70, 393, 193, 386, 851, 539, 439, 882, 336, 212, 9, 906, 459, 143, 21, 462, 499, 316, 308, 444, 608, 512, 96, 663, 131, 825, 348, 403, 117, 871, 425, 431, 667, 895, 153, 209, 971, 805, 488, 594, 877, 900, 182, 592, 227, 327, 650, 236, 497, 147, 615, 684, 289, 964, 69, 685, 41, 948, 492, 253, 498, 353, 632, 680, 374, 942, 196, 413, 366, 935, 992, 123,
		},
		// {
		// 	224, 816, 398, 324, 251, 218, 744, 436, 572, 629, 428, 221, 984, 91, 284, 818, 814, 886, 560, 787,
		// 	416, 168, 162, 905, 395, 350, 376, 756, 643, 903, 458, 740, 601, 750, 433, 693, 233, 397, 584, 60,
		// 	726, 463, 976, 579, 478, 199, 725, 704, 308, 481, 761, 593, 250, 559, 850, 571, 285, 763, 689, 424,
		// 	755, 273, 667, 169, 678, 881, 192, 295, 101, 495, 589, 618, 815, 471, 40, 354, 549, 466, 448, 661,
		// 	255, 773, 597, 293, 566, 927, 924, 902, 988, 784, 657, 136, 215, 52, 933, 228, 802, 494, 790, 310,
		// 	242, 150, 849, 210, 279, 958, 186, 286, 719, 765, 401, 57, 313, 239, 179, 238, 499, 48, 73, 389, 640,
		// 	874, 259, 975, 411, 971, 345, 939, 129, 512, 925, 413, 783, 917, 906, 370, 912, 735, 664, 754, 83,
		// 	948, 223, 604, 369, 846, 172, 234, 528, 561, 535, 979, 49, 921, 247, 847, 547, 158, 648, 314, 362,
		// 	15, 716, 70, 830, 887, 482, 711, 440, 741, 178, 333, 176, 392, 269, 575, 473, 71, 806, 72, 916, 220,
		// 	244, 276, 441, 808, 317, 198, 235, 931, 268, 374, 307, 351, 624, 316, 467, 117, 590, 288, 406, 625,
		// 	841, 833, 650, 941, 748, 177, 349, 97, 621, 663, 570, 65, 866, 969, 880, 890, 415, 638, 897, 723, 697,
		// 	58, 644, 414, 695, 112, 634, 283, 225, 327, 857, 503, 200, 684, 807, 457, 110, 56, 788, 18, 875, 738,
		// 	64, 511, 957, 779, 10, 580, 942, 612, 981, 227, 164, 6, 489, 839, 518, 292, 519, 845, 328, 146, 378,
		// 	879, 909, 991, 852, 968, 553, 5, 119, 649, 973, 835, 1000, 647, 477, 331, 425, 309, 509, 710, 107,
		// 	859, 600, 196, 443, 212, 541, 599, 524, 970, 843, 22, 626, 966, 491, 76, 115, 616, 263, 444, 907, 8,
		// 	964, 102, 777, 828, 68, 408, 335, 260, 399, 447, 676, 502, 586, 325, 201, 248, 548, 952, 344, 320,
		// 	817, 193, 532, 422, 893, 205, 630, 278, 609, 962, 438, 760, 898, 315, 96, 994, 405, 391, 154, 30,
		// 	347, 302, 615, 762, 636, 155, 515, 400, 786, 450, 329, 651, 516, 300, 298, 84, 86, 133, 894, 930, 767,
		// 	79, 673, 556, 980, 838, 730, 961, 736, 731, 66, 749, 50, 550, 17, 500, 364, 453, 476, 764, 421, 357,
		// 	858, 330, 869, 938, 854, 385, 386, 686, 410, 717, 381, 901, 507, 280, 462, 963, 77, 826, 4, 501, 753,
		// 	745, 144, 855, 620, 296, 270, 646, 598, 266, 208, 62, 718, 888, 913, 240, 899, 708, 120, 823, 733,
		// 	804, 871, 766, 361, 113, 343, 407, 173, 932, 243, 685, 142, 454, 706, 768, 484, 366, 194, 989, 674,
		// 	714, 301, 683, 167, 103, 147, 470, 88, 409, 219, 544, 794, 658, 41, 945, 359, 11, 668, 721, 596, 486,
		// 	222, 557, 774, 819, 770, 627, 591, 551, 145, 47, 877, 776, 844, 299, 977, 21, 53, 44, 123, 297, 863,
		// 	813, 37, 137, 78, 585, 825, 98, 189, 256,
		// },
	}

	// Iterate over each test case
	for i, stack := range testCases {
		fmt.Printf("Test Case %d:\n", i+1)
		fmt.Printf("Initial stack: %v\n", *stack)

		var moves []string // Store moves for each sorting function

		// Call the appropriate sorting function based on stack length
		switch len(*stack) {
		case 3:
			moves = stack.SortThree() // Sort stacks of length 3
		case 4, 5:
			moves = stack.SortFive(&src.Stack{}) // Sort stacks of length 4 or 5
		default:
			moves = stack.RadixSort(&src.Stack{}) // Sort larger stacks using Radix Sort
		}

		fmt.Printf("Moves used: %v\n", moves)
		fmt.Printf("Final sorted stack: %v\n\n", *stack)
	}
	fmt.Println("TESTING COMPLETE")
}
